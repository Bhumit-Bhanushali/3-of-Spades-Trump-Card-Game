# -*- coding: utf-8 -*-
"""3_of_Spades.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_AQYDRhJm8VKJOk8OFXDnT0h-A3U2U6u
"""

import random
import copy
from typing import List, Dict, Tuple, Optional

class Card:
    def __init__(self, suit: str, rank: str):
        self.suit = suit
        self.rank = rank
        self.points = self._calculate_points()
        self.suit_symbol = self._get_suit_symbol()

    def _get_suit_symbol(self) -> str:
        """Get the symbol for the suit"""
        symbols = {'Spades': '♠', 'Hearts': '♥', 'Diamonds': '♦', 'Clubs': '♣'}
        return symbols[self.suit]

    def _calculate_points(self) -> int:
        """Calculate points for this card based on game rules"""
        if self.rank in ['A', 'K', 'Q', 'J', '10']:
            return 10
        elif self.rank == '5':
            return 5
        elif self.rank == '3' and self.suit == 'Spades':
            return 30
        else:
            return 0

    def __str__(self):
        return f"{self.rank}{self.suit_symbol}"

    def __repr__(self):
        return self.__str__()

    def __eq__(self, other):
        return isinstance(other, Card) and self.suit == other.suit and self.rank == other.rank

class Player:
    def __init__(self, name: str, is_human: bool = True):
        self.name = name
        self.hand = []
        self.points = 0
        self.bid = 0
        self.is_human = is_human
        self.is_bidder = False
        self.is_partner = False
        self.partner_revealed = False

    def add_card(self, card: Card):
        self.hand.append(card)

    def remove_card(self, card: Card) -> bool:
        if card in self.hand:
            self.hand.remove(card)
            return True
        return False

    def sort_hand(self):
        """Sort hand by suit and rank for better display"""
        suit_order = {'Spades': 0, 'Hearts': 1, 'Diamonds': 2, 'Clubs': 3}
        rank_order = {'A': 14, 'K': 13, 'Q': 12, 'J': 11, '10': 10, '9': 9,
                     '8': 8, '7': 7, '6': 6, '5': 5, '4': 4, '3': 3, '2': 2}

        self.hand.sort(key=lambda card: (suit_order[card.suit], -rank_order[card.rank]))

class TrumpCardGame:
    def __init__(self, num_players: int = 5, human_players: List[int] = None):
        if num_players not in [5, 6]:
            raise ValueError("Game supports only 5 or 6 players")

        self.num_players = num_players
        self.players = []
        self.deck = []
        self.trump_suit = None
        self.partner_card = None
        self.partner_player_idx = None
        self.bidder_idx = None
        self.current_round = []
        self.rounds_played = 0
        self.game_over = False

        # Setup players
        if human_players is None:
            human_players = [0]  # Only player 0 is human by default

        for i in range(num_players):
            is_human = i in human_players
            if is_human:
                if len(human_players) == 1:
                    player_name = "You"  # Single player mode
                else:
                    player_name = f"Player {i+1}"  # Multiplayer mode
            else:
                player_name = f"AI {i+1}"
            self.players.append(Player(player_name, is_human))

        self._create_deck()
        self._deal_cards()

    def _create_deck(self):
        """Create and modify deck based on number of players"""
        suits = ['Spades', 'Hearts', 'Diamonds', 'Clubs']
        ranks = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2']

        # Create full deck
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit, rank))

        # Remove cards based on player count
        if self.num_players == 5:
            # Remove two 2's
            twos_removed = 0
            self.deck = [card for card in self.deck
                        if not (card.rank == '2' and twos_removed < 2 and (twos_removed := twos_removed + 1))]
        elif self.num_players == 6:
            # Remove all four 2's
            self.deck = [card for card in self.deck if card.rank != '2']

        random.shuffle(self.deck)

    def _deal_cards(self):
        """Deal cards equally among players"""
        cards_per_player = len(self.deck) // self.num_players

        for i in range(self.num_players):
            for _ in range(cards_per_player):
                self.players[i].add_card(self.deck.pop())
            self.players[i].sort_hand()

    def _get_valid_bid(self, player: Player) -> int:
        """Get a valid bid from player (human or AI)"""
        if player.is_human:
            while True:
                try:
                    print(f"\n{player.name}, place your bid (80-250, divisible by 5):")
                    bid = int(input())
                    if 80 <= bid <= 250 and bid % 5 == 0:
                        return bid
                    else:
                        print("Invalid bid! Must be 80-250 and divisible by 5.")
                except ValueError:
                    print("Please enter a valid number.")
        else:
            # Simple AI bidding logic
            hand_strength = sum(card.points for card in player.hand)
            base_bid = max(80, min(250, hand_strength + random.randint(0, 40)))
            return (base_bid // 5) * 5  # Make divisible by 5

    def bidding_phase(self):
        """Conduct bidding phase"""
        print("\n" + "="*50)
        print("BIDDING PHASE")
        print("="*50)
        print("Players must bid before seeing their cards!")
        print("Minimum bid: 80, Maximum bid: 250, Must be divisible by 5")

        bids = {}
        for i, player in enumerate(self.players):
            bid = self._get_valid_bid(player)
            player.bid = bid
            bids[i] = bid
            print(f"{player.name} bids: {bid}")

        # Find highest bidder
        self.bidder_idx = max(bids, key=bids.get)
        self.players[self.bidder_idx].is_bidder = True

        print(f"\nHighest bidder: {self.players[self.bidder_idx].name} with bid {bids[self.bidder_idx]}")

        # Now players can see their cards
        print("\n" + "="*30)
        print("CARDS DEALT - Players can now see their hands!")
        print("="*30)

        self._select_trump_and_partner()

    def _select_trump_and_partner(self):
        """Highest bidder selects trump suit and partner card"""
        bidder = self.players[self.bidder_idx]

        print(f"\n{bidder.name} is the highest bidder!")

        # Only show hand if bidder is human
        if bidder.is_human:
            self._display_hand(bidder)

        # Select trump suit
        if bidder.is_human:
            print("\nSelect trump suit:")
            suits = ['Spades', 'Hearts', 'Diamonds', 'Clubs']
            symbols = ['♠', '♥', '♦', '♣']
            for i, (suit, symbol) in enumerate(zip(suits, symbols)):
                print(f"{i+1}. {suit} {symbol}")

            while True:
                try:
                    choice = int(input("Enter choice (1-4): ")) - 1
                    if 0 <= choice < 4:
                        self.trump_suit = suits[choice]
                        break
                    else:
                        print("Invalid choice!")
                except ValueError:
                    print("Please enter a valid number.")
        else:
            # AI trump selection - choose suit with most cards
            suit_counts = {}
            for card in bidder.hand:
                suit_counts[card.suit] = suit_counts.get(card.suit, 0) + 1
            self.trump_suit = max(suit_counts, key=suit_counts.get)

        print(f"Trump suit selected: {self.trump_suit} {self._get_suit_symbol(self.trump_suit)}")

        # Select partner card
        self._select_partner_card(bidder)

    def _get_suit_symbol(self, suit: str) -> str:
        """Get the symbol for a suit"""
        symbols = {'Spades': '♠', 'Hearts': '♥', 'Diamonds': '♦', 'Clubs': '♣'}
        return symbols[suit]

    def _select_partner_card(self, bidder: Player):
        """Select partner card with validation"""
        available_cards = self._get_available_partner_cards(bidder)

        if bidder.is_human:
            print(f"\nSelect partner card (not in your hand, not trump, not 3 of Spades):")
            print("Available cards:")

            for i, card in enumerate(available_cards):
                print(f"{i+1}. {card}")

            while True:
                try:
                    choice = int(input(f"Enter choice (1-{len(available_cards)}): ")) - 1
                    if 0 <= choice < len(available_cards):
                        self.partner_card = available_cards[choice]
                        break
                    else:
                        print("Invalid choice!")
                except ValueError:
                    print("Please enter a valid number.")
        else:
            # AI partner selection - choose randomly from available cards
            self.partner_card = random.choice(available_cards)

        print(f"Partner card selected: {self.partner_card}")

        # Find who has the partner card
        for i, player in enumerate(self.players):
            if self.partner_card in player.hand:
                self.partner_player_idx = i
                self.players[i].is_partner = True
                break

    def _get_available_partner_cards(self, bidder: Player) -> List[Card]:
        """Get list of valid partner cards"""
        available = []
        suits = ['Spades', 'Hearts', 'Diamonds', 'Clubs']
        ranks = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3']

        bidder_cards = set((card.suit, card.rank) for card in bidder.hand)

        for suit in suits:
            for rank in ranks:
                card = Card(suit, rank)
                # Skip if: in bidder's hand, is trump, is 3 of Spades, or is a 2 (removed from game)
                if ((card.suit, card.rank) not in bidder_cards and
                    card.suit != self.trump_suit and
                    not (card.rank == '3' and card.suit == 'Spades') and
                    card.rank != '2'):
                    available.append(card)

        return available

    def _display_hand(self, player: Player):
        """Display player's hand in a single line"""
        print(f"\n{player.name}'s hand:")

        # Group cards by suit for better display
        hand_by_suit = {'Spades': [], 'Hearts': [], 'Diamonds': [], 'Clubs': []}
        for card in player.hand:
            hand_by_suit[card.suit].append(card)

        # Display cards in one line with suit grouping
        display_parts = []
        for suit in ['Spades', 'Hearts', 'Diamonds', 'Clubs']:
            if hand_by_suit[suit]:
                suit_cards = []
                for i, card in enumerate(hand_by_suit[suit]):
                    card_num = player.hand.index(card) + 1
                    trump_indicator = "★" if card.suit == self.trump_suit else ""
                    suit_cards.append(f"{card_num}.{card}{trump_indicator}")
                display_parts.append(" ".join(suit_cards))

        print(" | ".join(display_parts))

        # Show point values
        points_display = []
        for i, card in enumerate(player.hand):
            points_display.append(f"{i+1}:({card.points}pts)")
        print("Points: " + " ".join(points_display))

    def play_game(self):
        """Main game loop"""
        self.bidding_phase()

        print(f"\n" + "="*50)
        print("GAME STARTS!")
        print(f"Trump suit: {self.trump_suit} {self._get_suit_symbol(self.trump_suit)}")
        print(f"Partner card: {self.partner_card} (hidden until played)")
        print("="*50)

        current_leader = self.bidder_idx
        cards_per_player = len(self.players[0].hand)

        for round_num in range(cards_per_player):
            print(f"\n{'='*20} ROUND {round_num + 1} {'='*20}")
            winner_idx = self._play_round(current_leader)
            current_leader = winner_idx
            self.rounds_played += 1

        self._determine_winner()

    def _play_round(self, leader_idx: int) -> int:
        """Play a single round and return winner index"""
        self.current_round = []
        round_points = 0
        lead_suit = None

        print(f"{self.players[leader_idx].name} leads this round.")

        # Each player plays a card
        for i in range(self.num_players):
            player_idx = (leader_idx + i) % self.num_players
            player = self.players[player_idx]

            card = self._get_card_play(player, lead_suit)

            if i == 0:  # First card sets lead suit
                lead_suit = card.suit

            self.current_round.append((player_idx, card))
            round_points += card.points

            # Check if partner card was played
            if card == self.partner_card and not player.partner_revealed:
                player.partner_revealed = True
                self.players[self.bidder_idx].partner_revealed = True
                print(f"\n🎉 PARTNER REVEALED! {player.name} is the bidder's partner! 🎉")

        # Determine round winner
        winner_idx = self._determine_round_winner(lead_suit)
        self.players[winner_idx].points += round_points

        print(f"\nRound Summary:")
        for player_idx, card in self.current_round:
            trump_str = " ★" if card.suit == self.trump_suit else ""
            partner_str = " 🎯" if card == self.partner_card else ""
            print(f"  {self.players[player_idx].name}: {card}{trump_str}{partner_str}")

        print(f"Winner: {self.players[winner_idx].name} (+{round_points} points)")

        return winner_idx

    def _get_card_play(self, player: Player, lead_suit: Optional[str]) -> Card:
        """Get card play from player with rule validation"""
        if player.is_human:
            self._display_hand(player)

            while True:
                try:
                    print(f"\n{player.name}, choose a card to play:")
                    if lead_suit:
                        print(f"Lead suit is {lead_suit}. You must follow suit if possible.")

                    choice = int(input(f"Enter card number (1-{len(player.hand)}): ")) - 1

                    if 0 <= choice < len(player.hand):
                        chosen_card = player.hand[choice]

                        if self._is_valid_play(player, chosen_card, lead_suit):
                            player.remove_card(chosen_card)
                            print(f"{player.name} plays: {chosen_card}")
                            return chosen_card
                        else:
                            # Give specific error message
                            if lead_suit:
                                has_lead_suit = any(c.suit == lead_suit for c in player.hand)
                                has_trump = any(c.suit == self.trump_suit for c in player.hand)

                                if has_lead_suit and chosen_card.suit != lead_suit:
                                    print(f"Invalid! You must follow suit ({lead_suit} {self._get_suit_symbol(lead_suit)})")
                                elif not has_lead_suit and has_trump and chosen_card.suit != self.trump_suit:
                                    print(f"Invalid! You don't have {lead_suit} {self._get_suit_symbol(lead_suit)}, so you MUST play trump ({self.trump_suit} {self._get_suit_symbol(self.trump_suit)})")
                                else:
                                    print("Invalid play! Check the rules.")
                            else:
                                print("Invalid play! Check the rules.")
                    else:
                        print("Invalid card number!")

                except ValueError:
                    print("Please enter a valid number.")
        else:
            # AI card selection
            valid_cards = [card for card in player.hand
                          if self._is_valid_play(player, card, lead_suit)]

            if not valid_cards:
                valid_cards = player.hand  # Fallback

            chosen_card = self._ai_choose_card(player, valid_cards, lead_suit)
            player.remove_card(chosen_card)
            print(f"{player.name} plays: {chosen_card}")
            return chosen_card

    def _is_valid_play(self, player: Player, card: Card, lead_suit: Optional[str]) -> bool:
        """Check if card play is valid according to rules"""
        if lead_suit is None:  # First card of round
            return True

        # Check if player has lead suit
        has_lead_suit = any(c.suit == lead_suit for c in player.hand)

        if has_lead_suit:
            return card.suit == lead_suit  # Must follow suit

        # Player doesn't have lead suit - must play trump if available
        has_trump = any(c.suit == self.trump_suit for c in player.hand)

        if has_trump:
            # MUST play trump card if available
            return card.suit == self.trump_suit

        # No lead suit and no trump - can play any card
        return True

    def _ai_choose_card(self, player: Player, valid_cards: List[Card], lead_suit: Optional[str]) -> Card:
        """AI logic for choosing which card to play"""
        # Simple AI strategy
        if lead_suit is None:
            # Leading - play highest point card or trump
            trump_cards = [c for c in valid_cards if c.suit == self.trump_suit]
            if trump_cards:
                return max(trump_cards, key=lambda c: self._card_rank_value(c))
            return max(valid_cards, key=lambda c: c.points)
        else:
            # Following - try to win or play low
            return random.choice(valid_cards)

    def _card_rank_value(self, card: Card) -> int:
        """Get numeric value for card ranking"""
        rank_values = {'A': 14, 'K': 13, 'Q': 12, 'J': 11, '10': 10,
                      '9': 9, '8': 8, '7': 7, '6': 6, '5': 5, '4': 4, '3': 3, '2': 2}
        return rank_values.get(card.rank, 0)

    def _determine_round_winner(self, lead_suit: str) -> int:
        """Determine who wins the current round"""
        trump_cards = [(idx, card) for idx, card in self.current_round
                      if card.suit == self.trump_suit]

        if trump_cards:
            # Highest trump wins
            winner_idx, _ = max(trump_cards,
                              key=lambda x: self._card_rank_value(x[1]))
            return winner_idx
        else:
            # Highest card of lead suit wins
            lead_cards = [(idx, card) for idx, card in self.current_round
                         if card.suit == lead_suit]
            winner_idx, _ = max(lead_cards,
                              key=lambda x: self._card_rank_value(x[1]))
            return winner_idx

    def _determine_winner(self):
        """Determine game winner based on points"""
        print(f"\n" + "="*50)
        print("GAME OVER - FINAL RESULTS")
        print("="*50)

        bidder = self.players[self.bidder_idx]
        partner_idx = self.partner_player_idx
        partner = self.players[partner_idx] if partner_idx is not None else None

        bidder_team_points = bidder.points
        if partner:
            bidder_team_points += partner.points

        other_team_points = sum(p.points for i, p in enumerate(self.players)
                               if i != self.bidder_idx and i != partner_idx)

        print(f"\nBidder: {bidder.name} (bid: {bidder.bid})")
        if partner:
            print(f"Partner: {partner.name}")
        print(f"Bidder Team Points: {bidder_team_points}")
        print(f"Other Players Points: {other_team_points}")

        # Display individual scores
        print(f"\nIndividual Scores:")
        for player in self.players:
            team_str = ""
            if player.is_bidder:
                team_str = " (Bidder)"
            elif player.is_partner:
                team_str = " (Partner)"
            print(f"  {player.name}: {player.points} points{team_str}")

        # Determine winner
        if bidder_team_points >= bidder.bid:
            print(f"\n🎉 BIDDER TEAM WINS! 🎉")
            print(f"They achieved {bidder_team_points} points (needed {bidder.bid})")
        else:
            print(f"\n🎉 OTHER PLAYERS WIN! 🎉")
            print(f"Bidder team only got {bidder_team_points} points (needed {bidder.bid})")


def main():
    """Main function to run the game"""
    print("Welcome to Trump Card Game!")
    print("="*50)

    # Choose game mode
    print("Select Game Mode:")
    print("1. Single Player (You vs AI)")
    print("2. Multiplayer (All Human Players)")

    while True:
        try:
            mode = int(input("Enter mode (1 or 2): "))
            if mode in [1, 2]:
                break
            else:
                print("Please enter 1 or 2.")
        except ValueError:
            print("Please enter a valid number.")

    # Get number of players
    while True:
        try:
            num_players = int(input("Enter number of players (5 or 6): "))
            if num_players in [5, 6]:
                break
            else:
                print("Please enter 5 or 6.")
        except ValueError:
            print("Please enter a valid number.")

    # Set human players based on mode
    if mode == 1:
        # Single player mode - only player 1 is human
        human_players = [0]
        print(f"Single Player Mode: You are Player 1, others are AI")
    else:
        # Multiplayer mode - all players are human
        human_players = list(range(num_players))
        print(f"Multiplayer Mode: All {num_players} players are human")

    # Create and start game
    game = TrumpCardGame(num_players, human_players)
    game.play_game()

if __name__ == "__main__":
    main()